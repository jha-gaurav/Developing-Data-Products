ret_vec <- c(m1, s1)
return(ret_vec)
}
mean_sd(c(1,2,3,4,5))
mean_sd <- function(vec1) {
to_use <- !(is.na(vec1))
vec2 <- vec1[to_use]
m1 <- mean(vec2)
s1 <- sd(vec2)
ret_vec <- c(m1, s1)
return(ret_vec)
}
mean_sd(c(1,2,3,4,5))
mean_sd <- function(vec1) {
vec1[is.na(vec1)] <- 0
m1 <- mean(vec1)
s1 <- sd(vec1)
ret_vec <- c(m1, s1)
return(ret_vec)
}
mean_sd(c(1,2,3,4,5))
mean_sd(c(1,2,3,4,5,NA))
library(datasets)
data("mtcars")
str(mtcars)
#Create subset of mtcars on the basis of cylinders
df_cyl4 <- mtcars[mtcars$cyl == 4,] ##11 obs
df_cyl6 <- subset(mtcars, cyl == 6) ##7 obs
df_cyl8 <- subset(mtcars, cyl == 8) ##14 obs
hist(mtcars$cyl)
library(ggplot2)
g <- ggplot(mtcars, aes(x = wt, y = mpg, col = as.factor(cyl)))
g <- g + geom_point(pch = 25)
g
?mtcars
data(state)
str(state)
data("ToothGrowth")
str(ToothGrowth)
?ToothGrowth
q()
install.packages(c("car", "checkmate", "curl", "evaluate", "Formula", "htmlwidgets", "Rcpp", "TTR", "xts"))
q()
install.packages(c("tm", "SentimentAnalysis", "sentimentr", "RTextTools"))
install.packages("rJava")
q()
install.packages("rworldmap")
library(rworldmap)
newmap <- getMap(resolution = "low")
install.packages("spam")
library(rworldmap)
newmap <- getMap(resolution = "low")
plot(newmap, xlim = c(-20, 59), ylim = c(35, 71), asp = 1)
install.packages("ggmap")
library(ggmap)
map <- get_map(location = 'Europe', zoom = 4)
mapPoints <- ggmap(map) +
geom_point(aes(x = lon, y = lat, size = sqrt(flights)), data = airportD, alpha = .5)
mapPoints <- ggmap(map) +
geom_point(aes(x = lon, y = lat))
mapPoints
map <- get_map(location = 'India', zoom = 4)
mapPoints <- ggmap(map) +
geom_point(aes(x = lon, y = lat)) #, size = sqrt(flights)), data = airportD, alpha = .5)
mapPoints
airports <- read.csv("http://openflights.svn.sourceforge.net/viewvc/openflights/openflights/data/airports.dat", header = FALSE)
colnames(airports) <- c("ID", "name", "city", "country", "IATA_FAA", "ICAO", "lat", "lon", "altitude", "timezone", "DST")
head(airports)
library(rworldmap)
newmap <- getMap(resolution = "low")
plot(newmap, xlim = c(-20, 59), ylim = c(35, 71), asp = 1)
points(airports$lon, airports$lat, col = "red", cex = .6)
routes <- read.csv("http://openflights.svn.sourceforge.net/viewvc/openflights/openflights/data/routes.dat", header=F)
colnames(routes) <- c("airline", "airlineID", "sourceAirport", "sourceAirportID", "destinationAirport", "destinationAirportID", "codeshare", "stops", "equipment")
head(routes)
library(plyr)
departures <- ddply(routes, .(sourceAirportID), "nrow")
names(departures)[2] <- "flights"
arrivals <- ddply(routes, .(destinationAirportID), "nrow")
names(arrivals)[2] <- "flights"
airportD <- merge(airports, departures, by.x = "ID", by.y = "sourceAirportID")
airportA <- merge(airports, arrivals, by.x = "ID", by.y = "destinationAirportID")
library(ggmap)
map <- get_map(location = 'Europe', zoom = 4)
mapPoints <- ggmap(map) +
geom_point(aes(x = lon, y = lat, size = sqrt(flights)), data = airportD, alpha = .5)
mapPointsLegend <- mapPoints +
scale_area(breaks = sqrt(c(1, 5, 10, 50, 100, 500)), labels = c(1, 5, 10, 50, 100, 500), name = "departing routes")
mapPointsLegend
# create the data set containing both departures and arrivals
airportD$type <- "departures"
airportA$type <- "arrivals"
airportDA <- rbind(airportD, airportA)
# map the data
# map + data points
mapPointsDA <- ggmap(map) +
geom_point(aes(x = lon, y = lat, size = sqrt(flights)), data = airportDA, alpha = .5)
# adjust the legend
mapPointsLegendDA <- mapPointsDA +
scale_area(breaks = sqrt(c(1, 5, 10, 50, 100, 500)), labels = c(1, 5, 10, 50, 100, 500), name = "routes")
# panels according to type (departure/arrival)
mapPointsFacetsDA <- mapPointsLegendDA +
facet_grid(. ~ type)
# plot the map
mapPointsFacetsDA
install.packages("plotly")
library(plotly)
df <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2011_february_us_airport_traffic.csv')
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray95"),
subunitcolor = toRGB("gray85"),
countrycolor = toRGB("gray85"),
countrywidth = 0.5,
subunitwidth = 0.5
)
p <- plot_geo(df, lat = ~lat, lon = ~long) %>%
add_markers(
text = ~paste(airport, city, state, paste("Arrivals:", cnt), sep = "<br />"),
color = ~cnt, symbol = I("square"), size = I(8), hoverinfo = "text"
) %>%
colorbar(title = "Incoming flights<br />February 2011") %>%
layout(
title = 'Most trafficked US airports<br />(Hover for airport)', geo = g
)
chart_link = plotly_POST(p, filename="maps/traffic")
chart_link
chart_link = plotly_POST(p, filename="maps/traffic")
q()
library("SentimentAnalysis", lib.loc="~/R/win-library/3.4")
detach("package:SentimentAnalysis", unload=TRUE)
library(datasets)
data(crime)
library(ggmap)
data(crime)
str(crime)
qmap('houston', zoom = 13)
gglocator(2)
gglocator(1)
violent_crimes <- subset(crime,
+ offense != "auto theft" & offense != "theft" & offense != "burglary")
violent_crimes <- subset(crime,
offense != "auto theft" & offense != "theft" & offense != "burglary")
violent_crimes$offense <- factor(violent_crimes$offense,
levels = c("robbery", "aggravated assault", "rape", "murder"))
violent_crimes <- subset(violent_crimes,
-95.39681 <= lon & lon <= -95.34188 &
29.73631 <= lat & lat <= 29.78400)
theme_set(theme_bw(16))
HoustonMap <- qmap("houston", zoom = 14, color = "bw", legend = "topleft")
HoustonMap +
geom_point(aes(x = lon, y = lat, colour = offense, size = offense),
data = violent_crimes)
HoustonMap +
stat_bin2d(
aes(x = lon, y = lat, colour = offense, fill = offense),
size = .5, bins = 30, alpha = 1/2,
data = violent_crimes
)
install.packages("googleVis")
cities <- c("ARNHEM","ATHENS","BAAR","CAMBRIDGESHIRE")
library(ggmap)
geocode(cities[1])
cities <- c("NEW DELHI","ATHENS","BAAR","CAMBRIDGESHIRE")
geocode(cities[1])
cities <- c("GURGAON","ATHENS","BAAR","CAMBRIDGESHIRE")
geocode(cities[1])
cities <- c("COCHIN","ATHENS","BAAR","CAMBRIDGESHIRE")
geocode(cities[1])
q()
text <- c("Because I could not stop for Death -",
"He kindly stopped for me -",
"The Carriage held but just Ourselves -",
"and Immortality")
text
library(dplyr)
text_df <- data_frame(line = 1:4, text = text)
text_df
library(tidytext)
text_df %>%
unnest_tokens(word, text)
###############################
library(janeaustenr)
library(dplyr)
library(stringr)
original_books <- austen_books() %>%
group_by(book) %>%
mutate(linenumber = row_number(),
chapter = cumsum(str_detect(text, regex("^chapter [\\divxlc]",
ignore_case = TRUE)))) %>%
ungroup()
original_books
tidy_books <- original_books %>%
unnest_tokens(word, text)
tidy_books
data(stop_words)
tidy_books <- tidy_books %>%
anti_join(stop_words)
tidy_books
tidy_books %>%
count(word, sort = TRUE)
library(ggplot2)
tidy_books %>%
count(word, sort = TRUE) %>%
filter(n > 600) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n)) +
geom_col() +
xlab(NULL) +
coord_flip()
library(gutenbergr)
hgwells <- gutenberg_download(c(35, 36, 5230, 159))
tidy_hgwells <- hgwells %>%
unnest_tokens(word, text) %>%
anti_join(stop_words)
tidy_hgwells %>%
count(word, sort = TRUE)
bronte <- gutenberg_download(c(1260, 768, 969, 9182, 767))
tidy_bronte <- bronte %>%
unnest_tokens(word, text) %>%
anti_join(stop_words)
tidy_bronte %>%
count(word, sort = TRUE)
library(tidyr)
frequency <- bind_rows(mutate(tidy_bronte, author = "Brontë Sisters"),
mutate(tidy_hgwells, author = "H.G. Wells"),
mutate(tidy_books, author = "Jane Austen")) %>%
mutate(word = str_extract(word, "[a-z']+")) %>%
count(author, word) %>%
group_by(author) %>%
mutate(proportion = n / sum(n)) %>%
select(-n) %>%
spread(author, proportion) %>%
gather(author, proportion, `Brontë Sisters`:`H.G. Wells`)
frequency
library(scales)
ggplot(frequency, aes(x = proportion, y = `Jane Austen`, color = abs(`Jane Austen` - proportion))) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 2.5, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = percent_format()) +
scale_y_log10(labels = percent_format()) +
scale_color_gradient(limits = c(0, 0.001), low = "darkslategray4", high = "gray75") +
facet_wrap(~author, ncol = 2) +
theme(legend.position="none") +
labs(y = "Jane Austen", x = NULL)
library(tidytext)
sentiments
get_sentiments(loughran)
get_sentiments("loughran")
get_sentiments("afinn")
get_sentiments("nrc")
class(get_sentiments("nrc"))
nrc_df <- get_sentiments("nrc")
str(nrc_df)
unique(nrc_df$sentiment)
nrc_df[nrc_df$sentiment == "anticipation"]
nrc_df[nrc_df$sentiment == "anticipation",]
nrc_df[nrc_df$sentiment == "trust",]
nrc_df[nrc_df$sentiment == "positive",]
get_sentiments("loughran")
lgh_df <- get_sentiments("loughran")
unique(lgh_df$sentiment)
lgh_df[lgh_df$sentiment == "litigious",]
get_sentiments("afinn")
library(janeaustenr)
library(dplyr)
library(stringr)
tidy_books <- austen_books() %>%
group_by(book) %>%
mutate(linenumber = row_number(),
chapter = cumsum(str_detect(text, regex("^chapter [\\divxlc]",
ignore_case = TRUE)))) %>%
ungroup() %>%
unnest_tokens(word, text)
tidy_books
nrcjoy <- get_sentiments("nrc") %>%
filter(sentiment == "joy")
tidy_books %>%
filter(book == "Emma") %>%
inner_join(nrcjoy) %>%
count(word, sort = TRUE)
5/3
5%/%3
floor(5/3)
?spread
library(tidyr)
janeaustensentiment <- tidy_books %>%
inner_join(get_sentiments("bing")) %>%
count(book, index = linenumber %/% 80, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
janeaustensentiment
janeaustensentiment <- tidy_books %>%
inner_join(get_sentiments("bing")) %>%
count(book, index = linenumber %/% 80, sentiment)
janeaustensentiment
janeaustensentiment <- tidy_books %>%
inner_join(get_sentiments("bing")) %>%
count(book, index = linenumber %/% 80, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
library(ggplot2)
ggplot(janeaustensentiment, aes(index, sentiment, fill = book)) +
geom_col(show.legend = FALSE) +
facet_wrap(~book, ncol = 2, scales = "free_x")
str(nrc_df)
nrc_df[nrc_df$word == "suggest",]
unique(nrc_df$sentiment)
nrc_df[nrc_df$sentiment == "trust",]
install.packages(c("wordcloud", "reshape2", "wordcloud2"))
q()
devtools::install_github("rstudio/rmarkdown")
install.packages("devtools")
devtools::install_github("rstudio/rmarkdown")
rmarkdown::render('in.md',
output_format=pdf_document(latex_engine='xelatex')
)
# List of useful packages
pkg <- c("tidyr", "dplyr", "ggplot2", "knitr", "rmarkdown")
# Check if packages are not installed and assign the
# names of the uninstalled packages to the variable new.pkg
new.pkg <- pkg[!(pkg %in% installed.packages())]
# If there are any packages in the list that aren't installed,
# install them
if (length(new.pkg)) {
install.packages(new.pkg, repos = "http://cran.rstudio.com")
}
cars <- data(mtcars)
str(cars)
data(mtcars)
str(mtcars)
?mtcars
q()
q()
q()
library(dplyr)
mtcars_sub <- select(mtcars, mpg, am)
fit <- lm(mpg ~ am, data = mtcars_sub)
coef(fit)
q()
install.packages("caret")
q()
q()
download.datasets("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv")
??download.datasets
??download.dataset
??download.data
str(df_train)
fileURL_train <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
download.file(fileURL_train, destfile = "training.csv")
df_train <- read.csv("training.csv", stringsAsFactors = FALSE)
fileURL_test <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
download.file(fileURL_test, destfile = "test.csv")
df_test <- read.csv("test.csv", stringsAsFactors = FALSE)
dim(df_train)
dim(df_test)
table(df_train$classe)
str(df_train)
table(df_train$user_name)
for (i in 1:160){
table(df_train[,i])
}
table(df_train[,1])
table(df_train$new_window)
q()
install.packages("kernlab")
library(kernlab)
data(spam)
head(spam)
plot(density(spam$your[spam$type == "nonspam"]),
col="blue", main = "", xlab = "Frequency of 'your'")
prediction <- ifelse(spam$your > 0.5, "spam", "nonspam")
table(prediction, spam$type) / length(spam$type)
q()
q()
shiny::runApp('F:/Coursera/Course9/Code Practice/MyFirstApp')
runApp('F:/Coursera/Course9/Code Practice/MyFirstApp')
runApp('F:/Coursera/Course9/Code Practice/MyFirstApp')
runApp('F:/Coursera/Course9/Code Practice/MyFirstApp')
runApp('F:/Coursera/Course9/Code Practice/MyFirstApp')
runApp('F:/Coursera/Course9/Code Practice/MyFirstApp')
runApp('F:/Coursera/Course9/Code Practice/MyFirstApp')
install.packages("googleVis")
install.packages("plotly")
library(googleVis)
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 600, height = 400))
plot(M)
plot(M)
print(M, "chart")
plot(M)
plot(M)
Fruits
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 600, height = 400))
print(M, "chart")
plot(M)
plot(M)
plot(M)
plot(M)
plot(M)
plot(M)
plot(M)
plot(M)
q()
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 600, height = 400))
print(M, "chart")
plot(M)
q()
install.packages("leaflet")
library(leaflet)
my_map <- leaflet() %>% addTiles()
my_map
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 600, height = 400))
print(M, "chart")
plot(M)
install.packages("ggmap")
cities <- c("HYDERABAD", "CHENNAI", "MUMBAI", "INDORE", "NEW DELHI", "KOLKATA")
cols <- c("RED", "BLUE", "GREEN")
library(ggmap)
city_latlong <- geocode(cities)
str(city_latlong)
cities <- c("HYDERABAD", "CHENNAI", "MUMBAI", "INDORE", "NEW DELHI", "KOLKATA")
cols <- c("RED", "BLUE", "GREEN")
library(ggmap)
city_latlong <- geocode(cities)
str(city_latlong)
#city_ll <- paste(city_latlong$lat, city_latlong$lon, sep = ":")
#city_latlong <- gsub(",", ":")
city_df <- data.frame(cities, city_latlong, cols, stringsAsFactors = FALSE)
str(city_df)
map1 <- get_map(location = "INDIA", zoom = 4)
plot(map1)
map_points <- ggmap(map1) +
geom_point(aes(x = lon, y = lat, col = cols, pch = 19, size = 2), data = city_df, alpha = 0.5) +
scale_shape_identity() +
geom_text(aes(label = cities, cex = 1.80), data = city_df)
map_points
q()
q()
library(plotly)
plot_ly(mtcars, x = mtcars$wt, y = mtcars$mpg, mode = "markers", color = as.factor(mtcars$cyl),
size = mtcars$hp)
data("JohnsonJohnson")
head(JohnsonJohnson)
str(JohnsonJohnson)
data("rock")
rock
str(rock)
?rock
data("OrchardSprays")
head(OrchardSprays)
help("OrchardSprays")
OrchardSprays
Titanic"
""
str(Titanic)
head(Titanic)
data("Titanic")
head(Titanic)
class(Titanic)
as.data.frame(Titanic)
help("Titanic")
df_titan <- as.data.frame(Titanic)
str(df_titan)
plot_ly(df_titan, x = df_titan$Class, y = df_titan$Freq, mode = "markers",
color = df_titan$Survived, size = df_titan$Age)
plot_ly(df_titan, x = df_titan$Class, y = df_titan$Freq, mode = "markers",
color = df_titan$Survived, size = as.numeric(df_titan$Age) + 1)
plot_ly(df_titan, x = df_titan$Class, y = df_titan$Freq, mode = "markers",
color = df_titan$Survived, size = as.numeric(df_titan$Age) + 1, type = "box")
plot_ly(df_titan, x = df_titan$Class, y = df_titan$Freq, mode = "markers",
color = df_titan$Survived, size = as.numeric(df_titan$Age) + 1, type = "point")
plot_ly(df_titan, x = df_titan$Class, y = df_titan$Freq, mode = "markers",
color = df_titan$Survived, size = as.numeric(df_titan$Age) + 1, type = "area")
plot_ly(df_titan, x = df_titan$Class, y = df_titan$Freq, mode = "markers",
color = df_titan$Survived, size = as.numeric(df_titan$Age) + 1)
plot_ly(df_titan, x = df_titan$Class, y = df_titan$Freq, mode = "markers",
color = df_titan$Survived, size = as.numeric(df_titan$Sex))
plot_ly(df_titan, x = df_titan$Class, y = df_titan$Freq, mode = "markers",
color = df_titan$Survived)
plot_ly(mtcars, x = mtcars$wt, y = mtcars$mpg, mode = "markers", color = as.factor(mtcars$cyl),
size = mtcars$hp)
plot_ly(df_titan, x = as.numeric(df_titan$Class), y = df_titan$Freq, mode = "markers",
color = df_titan$Survived, size = as.numeric(df_titan$Sex))
plot_ly(df_titan, x = df_titan$Class, y = df_titan$Freq, mode = "markers",
color = df_titan$Survived, size = as.numeric(df_titan$Sex))
plot_ly(df_titan, x = df_titan$Class, y = df_titan$Freq,
color = df_titan$Survived, size = as.numeric(df_titan$Sex))
plot_ly(df_titan, x = df_titan$Class, y = df_titan$Freq, xlab = "Class",
color = df_titan$Survived, size = as.numeric(df_titan$Sex))
plot_ly(df_titan, x = df_titan$Class, y = df_titan$Freq, opacity = df_titan$Sex,
color = df_titan$Survived, size = as.numeric(df_titan$Sex))
plot_ly( x = Class, y = df_titan$Freq,
color = df_titan$Survived, size = as.numeric(df_titan$Sex))
data("Titanic")
plot_ly(x = Class, y = df_titan$Freq,
color = df_titan$Survived, size = as.numeric(df_titan$Sex))
df_titan <- as.data.frame(Titanic)
plot_ly(x = Class, y = df_titan$Freq,
color = df_titan$Survived, size = as.numeric(df_titan$Sex))
plot_ly(x = df_titan$Class, y = df_titan$Freq,
color = df_titan$Survived, size = as.numeric(df_titan$Sex))
q()
shiny::runApp('F:/Coursera/Course9/Course Project/Week4/Proj1/Course_Project_DDP01')
runApp('F:/Coursera/Course9/Course Project/Week4/Proj1/Course_Project_DDP01')
setwd("F:/Coursera/Course9/Course Project/Week4/Proj1/Course_Project_DDP01")
